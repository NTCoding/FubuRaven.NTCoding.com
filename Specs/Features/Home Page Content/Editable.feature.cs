// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Specs.Features.HomePageContent
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Editable home page content")]
    public partial class EditableHomePageContentFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Editable.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Editable home page content", "In order to be able to change my greeting to visitors of the site\r\nAs the site ow" +
                    "ner\r\nI need to be able to edit the content of the home page online", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Happy Path")]
        public virtual void HappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Happy Path", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have navigated to the \"Edit Home Page\" page");
#line 8
  testRunner.And("I have specified the new content as \"Welcome to NTCoding - now getting jiggy with" +
                    " fubu and Raven\"");
#line 9
 testRunner.When("I confirm my new content");
#line 10
 testRunner.Then("I should be viewing the \"Home Page\"");
#line 11
  testRunner.And("I should see the following welcome content \"Welcome to NTCoding - now getting jig" +
                    "gy with fubu and Raven\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Html Content")]
        public virtual void HtmlContent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Html Content", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have navigated to the \"Edit Home Page\" page");
#line 15
  testRunner.And("I have specified the new content as \"<h1>Naughty</h1>\"");
#line 16
 testRunner.When("I confirm my changes");
#line 17
 testRunner.Then("I should be viewing the \"Edit Home Page\" page");
#line 18
  testRunner.And("I should see the following validation message \"Update failed - Html not allowed\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty Content")]
        public virtual void EmptyContent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty Content", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have navigated to the \"Edit Home Page\" page");
#line 22
  testRunner.And("I have specified the new content as \"\"");
#line 23
 testRunner.When("I confirm my change");
#line 24
 testRunner.Then("I should be viewing the \"Edit Home Page\" page");
#line 25
  testRunner.And("I should see be prompted to confirm I want the content left empty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
